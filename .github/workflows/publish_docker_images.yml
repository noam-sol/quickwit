name: Build and publish Docker images

on:
  push:
    branches:
      - vega-main
  pull_request:
    branches:
      - vega-main
  workflow_dispatch:
    inputs:
      image_suffix:
        default: "pr"
        description: "Image suffix for the built image in the format of vega_edge-<image_suffix>"
        required: true
        type: string
env:
  REGISTRY_IMAGE: quickwit

permissions:
  id-token: write
  contents: read

jobs:
  build:
    strategy:
      matrix:
        platform:
          - linux-amd64-latest
          - linux-arm64
    runs-on:
      group: linux-4xlarge
      labels: ${{ matrix.platform }}

    steps:
      - name: Set up ssh key for tantivy fork
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.TANTIVY_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials - Production
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.IAM_ROLE_PROD }}
          aws-region: us-east-2

      - name: Login to Amazon ECR - Production
        id: login-ecr-prod
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.login-ecr-prod.outputs.registry }}/${{ env.REGISTRY_IMAGE }}
          labels: |
            org.opencontainers.image.title=Quickwit
            maintainer=Quickwit, Inc. <hello@quickwit.io>
            org.opencontainers.image.vendor=Quickwit, Inc.
            org.opencontainers.image.licenses=AGPL-3.0

      - name: Retrieve commit date, hash, and tags
        run: |
          echo "QW_COMMIT_DATE=$(TZ=UTC0 git log -1 --format=%cd --date=format-local:%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
          echo "QW_COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "QW_COMMIT_TAGS=$(git tag --points-at HEAD | tr '\n' ',')" >> $GITHUB_ENV

      - name: Set up tantivy SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TANTIVY_SSH_KEY }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          ssh: default
          platforms: ${{ matrix.platform == 'linux-amd64-latest' && 'linux/amd64' || 'linux/arm64' }}
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            QW_COMMIT_DATE=${{ env.QW_COMMIT_DATE }}
            QW_COMMIT_HASH=${{ env.QW_COMMIT_HASH }}
            QW_COMMIT_TAGS=${{ env.QW_COMMIT_TAGS }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: |
            ${{ github.event_name == 'push' && format('{0}-{1}', steps.meta.outputs.tags, matrix.platform == 'linux-amd64-latest' && 'amd64' || 'arm64') || '' }}
            ${{ github.event_name == 'push' && format('{0}/quickwit:vega_edge-{1}', steps.login-ecr-prod.outputs.registry, matrix.platform == 'linux-amd64-latest' && 'amd64' || 'arm64') || '' }}
            ${{ github.event_name == 'workflow_dispatch' && format('{0}/quickwit:vega_edge-{1}-{2}', steps.login-ecr-prod.outputs.registry, inputs.image_suffix, matrix.platform == 'linux-amd64-latest' && 'amd64' || 'arm64') || '' }}
          cache-from: type=registry,ref=${{ steps.login-ecr-prod.outputs.registry }}/${{ env.REGISTRY_IMAGE }}:cache-${{ matrix.platform }}
          cache-to: type=registry,ref=${{ steps.login-ecr-prod.outputs.registry }}/${{ env.REGISTRY_IMAGE }}:cache-${{ matrix.platform }},mode=max,image-manifest=true,oci-mediatypes=true,compression=estargz,compression-level=9

  manifest:
    needs: build
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials - Production
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.IAM_ROLE_PROD }}
          aws-region: us-east-2
          
      - name: Login to Amazon ECR - Production
        id: login-ecr-prod
        uses: aws-actions/amazon-ecr-login@v2

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr-prod.outputs.registry }}/${{ env.REGISTRY_IMAGE }}
          labels: |
            org.opencontainers.image.title=Quickwit
            maintainer=Quickwit, Inc. <hello@quickwit.io>
            org.opencontainers.image.vendor=Quickwit, Inc.
            org.opencontainers.image.licenses=AGPL-3.0

      # Build and push image manifest (don't push on PR)
      # https://github.com/Noelware/docker-manifest-action
      - name: Build and push manifests for push event
        if: github.event_name == 'push'
        uses: Noelware/docker-manifest-action@v1
        with:
          inputs: |
            ${{ steps.login-ecr-prod.outputs.registry }}/quickwit:vega_edge-amd64,${{ steps.login-ecr-prod.outputs.registry }}/quickwit:vega_edge-arm64
          tags: |
            ${{ steps.login-ecr-prod.outputs.registry }}/quickwit:main-${{ github.sha }}
            ${{ steps.login-ecr-prod.outputs.registry }}/quickwit:vega_edge
          push: true

      - name: Build and push vega_edge manifest for workflow dispatch
        if: github.event_name == 'workflow_dispatch'
        uses: Noelware/docker-manifest-action@v1
        with:
          inputs: |
            ${{ steps.login-ecr-prod.outputs.registry }}/quickwit:vega_edge-${{ inputs.image_suffix }}-amd64,${{ steps.login-ecr-prod.outputs.registry }}/quickwit:vega_edge-${{ inputs.image_suffix }}-arm64
          tags: |
            ${{ steps.login-ecr-prod.outputs.registry }}/quickwit:vega_edge-${{ inputs.image_suffix }}
          push: true
